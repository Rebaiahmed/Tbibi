var fs=require("fs");module.exports=function(s){s.initConfig({less:{build:{options:{},files:{"dist/waves.css":"src/less/waves.less"}},minified:{options:{cleancss:!0},files:{"dist/waves.min.css":"src/less/waves.less"}},test:{options:{cleancss:!0,cleancssOptions:{keepSpecialComments:"0"}},files:{"tests/less/waves.min.css":"src/less/waves.less","tests/sass/waves.min.css":"tests/sass/waves.css","tests/scss/waves.min.css":"tests/scss/waves.css","tests/stylus/waves.min.css":"tests/stylus/waves.css"}}},jshint:{files:["gruntfile.js","src/js/*.js"],options:{globals:{console:!0}}},uglify:{options:{mangle:!0,compress:!0,sourceMap:!0,sourceMapName:"dist/waves.min.js.map",preserveComments:"some"},js:{files:{"dist/waves.min.js":["src/js/waves.js"]}}},copy:{js:{expand:!0,cwd:"src/js",src:"waves.js",dest:"dist/"},docs:{expand:!0,cwd:"dist",src:["waves.min.css","waves.min.js"],dest:"docs/static"}},execute:{less2stylus:{call:function(s,e,t){var l=t(),c=require("child_process").exec;c("cd node_modules/less2stylus && ./less2stylus ../../src/less/waves.less",function(e,t,c){s.log.writeln("Executing less2styus..."),e&&s.log.writeln("Error! "+e);var a=require("fs");a.writeFile("src/stylus/waves.styl",t,function(e){e?s.log.writeln(e):s.log.writeln("Stylus file was saved!"),l()})})}},less2scss:{call:function(s,e,t){var l=t(),c=fs.readFileSync("src/less/waves.less",{encoding:"utf8"});c=c.replace(/@(?!import|media|keyframes|-)/g,"$"),c=c.replace(/\.([\w\-]*)\s*\((.*)\)\s*\{/g,"@mixin $1($2){"),c=c.replace(/\.([\w\-]*\(.*\)\s*;)/g,"@include $1"),c=c.replace(/~(?:\"|\')(.*)(?:\"|\')/g,'#{"$1"}'),fs.writeFileSync("src/scss/waves.scss",c),l()}},test:{call:function(s,e,t){var l=t(),c=fs.readFileSync("tests/less/waves.min.css",{encoding:"utf8"}),a=fs.readFileSync("tests/sass/waves.min.css",{encoding:"utf8"}),i=fs.readFileSync("tests/scss/waves.min.css",{encoding:"utf8"}),n=fs.readFileSync("tests/stylus/waves.min.css",{encoding:"utf8"}),r=!1;c!=a&&(s.log.writeln("ERROR: sass failed Dashabord."),r=!0),c!=i&&(s.log.writeln("ERROR: scss failed Dashabord."),r=!0),c!=n&&(s.log.writeln("ERROR: stylus failed Dashabord."),r=!0),a!=i&&(s.log.writeln("WARNING: sass files aren't equal?"),r=!0),r||s.log.writeln("PASS: conversions generated same CSS"),l()}}},"sass-convert":{options:{from:"scss",to:"sass",indent:2},files:{cwd:"src/scss",src:"*.scss",dest:"src/sass"}},sass:{test:{files:[{expand:!0,cwd:"src",src:["**/*.sass","**/*.scss"],dest:"tests/",ext:".css"}]}},stylus:{test:{files:{"tests/stylus/waves.css":"src/stylus/waves.styl"}}},clean:{test:["tests/*"]},watch:{script:{options:{spawn:!1,event:["added","deleted","changed"]},files:["src/**/*.js","src/**/*.less"],tasks:["build"]},grunt:{files:["Gruntfile.js"]}}}),s.loadNpmTasks("grunt-contrib-concat"),s.loadNpmTasks("grunt-contrib-less"),s.loadNpmTasks("grunt-contrib-jshint"),s.loadNpmTasks("grunt-contrib-uglify"),s.loadNpmTasks("grunt-contrib-copy"),s.loadNpmTasks("grunt-contrib-watch"),s.loadNpmTasks("grunt-contrib-sass"),s.loadNpmTasks("grunt-contrib-stylus"),s.loadNpmTasks("grunt-execute"),s.loadNpmTasks("grunt-sass-convert"),s.loadNpmTasks("grunt-contrib-clean"),s.registerTask("build",["less:build","less:minified","jshint","uglify","copy","execute:less2stylus","execute:less2scss","sass-convert","sass:test","stylus:test","less:test","execute:test","clean:test"]),s.registerTask("default",["build","watch"])};