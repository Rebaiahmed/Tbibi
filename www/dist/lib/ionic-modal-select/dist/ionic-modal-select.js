/*!
 * Copyright 2015 Inmagik SRL.
 * http://www.inmagik.com/
 *
 * ionic-modal-select, v1.0.0
 * Modal select directive for Ionic framework.
 * 
 * By @bianchimro
 *
 * Licensed under the MIT license. Please see LICENSE for more information.
 *
 */
var modalSelectTemplates=modalSelectTemplates||{};modalSelectTemplates["modal-template-multiple.html"]=' <ion-modal-view class="ionic-select-modal" ng-class="::ui.modalClass">\n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}} MULTIPLE</h1>\n    </ion-header-bar>\n    <ion-content>\n\n    <div ng-if="!ui.shortList">\n        <div class="text-center" ng-if="!showList" style="padding-top:40px;">\n            <h4 class="muted">{{::ui.loadListMessage}}</h4>\n            <p>\n                <ion-spinner></ion-spinner>\n            </p>\n        </div>\n        <div class="list" ng-if="showList" class="animate-if">\n            <div class="item item-text-wrap" collection-repeat="option in options track by $index" ng-click="setOption(option)" ng-class="{\'{{::ui.selectedClass}}\': getSelectedValue(option) == ui.value}"> \n                <div compile="inner" compile-once="true"></div>\n            </div>\n        </div>\n    </div>\n    <div ng-if="ui.shortList">\n        <div class="list">\n            <div class="item item-checkbox" ng-repeat="option in options track by $index">\n                <label class="checkbox">\n                    <input type="checkbox" ng-model="isChecked[$index]">\n                </label>\n                <div compile="inner" compile-once="true"></div>\n            </div>\n        </div>\n    </div>\n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button class="button button-stable" ng-click="closeModal()">{{ui.cancelButton}}</button>\n        <h2 class="title"><button class="button">OK</button></h2>\n        <button ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetValue()">{{ui.resetButton}}</button>\n    </ion-footer-bar>\n</ion-modal-view>\n';var modalSelectTemplates=modalSelectTemplates||{};modalSelectTemplates["modal-template.html"]=' <ion-modal-view class="ionic-select-modal" ng-class="::ui.modalClass">\n    \n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n\n    <div class="bar bar-subheader item-input-inset" ng-class="::ui.subHeaderClass" ng-if="ui.hasSearch">\n      <label class="item-input-wrapper">\n        <i class="icon ion-ios-search placeholder-icon"></i>\n        <input type="search" placeholder="{{::ui.searchPlaceholder}}" ng-model="ui.searchValue">\n      </label>\n      <button type="button" class="button button-clear" ng-click="clearSearch()">\n        {{ ui.cancelSearchButton }}\n      </button>\n    </div>\n\n    <ion-content class="has-header" ng-class="{\'has-subheader\':ui.hasSearch}">\n        <div class="text-center" ng-if="!ui.shortList && !showList" style="padding-top:40px;">\n            <h4 class="muted">{{::ui.loadListMessage}}</h4>\n            <p>\n                <ion-spinner></ion-spinner>\n            </p>\n        </div>\n        <div ng-if="showList">\n            <div ng-if="!ui.shortList">\n                <div class="list" ng-if="showList" class="animate-if">\n                    <div class="item item-text-wrap" collection-repeat="option in options track by $index" ng-click="setOption(option)" ng-class="{\'{{::ui.selectedClass}}\': compareValues(getSelectedValue(option), ui.value) }"> \n                        <div compile="inner" compile-once="true"></div>\n                    </div>\n                </div>\n            </div>\n            <div ng-if="ui.shortList">\n                <div class="list">\n                    <div class="item item-text-wrap" ng-repeat="option in options track by $index" ng-click="setOption(option)" ng-class="{\'{{::ui.selectedClass}}\': compareValues(getSelectedValue(option), ui.value) }">\n                        <div compile="inner" compile-once="true"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </ion-content>\n\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button type="button" class="button button-stable modal-select-close-button" ng-click="closeModal()">{{ui.cancelButton}}</button>\n        <button type="button" ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetValue()">{{ui.resetButton}}</button>\n    </ion-footer-bar>\n\n</ion-modal-view>\n',function(){angular.module("ionic-modal-select",[]).directive("compile",["$compile",function(e){return function(t,n,o){var i=t.$watch(function(e){return e.$eval(o.compile)},function(s){n.html(s),e(n.contents())(t),"true"===o.compileOnce&&i()})}}]).directive("modalSelect",["$ionicModal","$timeout","$filter","$parse",function(e,t,n,o){return{restrict:"A",require:"ngModel",scope:{initialOptions:"=options",optionGetter:"&",onSelect:"&",onReset:"&"},link:function(i,s,a,l,c){function r(){"true"===a.useCollectionRepeat?u=!1:"false"===a.useCollectionRepeat?u=!0:"undefined"!=typeof i.options&&(u=!!(i.options.length<d)),i.ui.shortList=u}var u=!0,d=a.shortListBreak?parseInt(a.shortListBreak):10,p=a.optionProperty,h=a.optionGetter,m="false"!==a.clearSearchOnSelect,v=!!a.multiple;v&&(i.checkedItems=[]),i.ui={modalTitle:a.modalTitle||"Select an option",okButton:a.okButton||"OK",hideReset:"true"===a.hideReset,resetButton:a.resetButton||"Reset",cancelButton:a.cancelButton||"Cancel",loadListMessage:a.loadListMessage||"Loading",modalClass:a.modalClass||"",headerFooterClass:a.headerFooterClass||"bar-stable",value:null,selectedClass:a.selectedClass||"option-selected",hasSearch:"true"===a.hasSearch,searchValue:"",searchPlaceholder:a.searchPlaceholder||"Search",subHeaderClass:a.subHeaderClass||"bar-stable",cancelSearchButton:a.cancelSearchButton||"Clear"};var b=[];if(i.options=[],a.optionsExpression){var g=a.optionsExpression,f=g.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!f)throw new Error("collection-repeat expected expression in form of '_item_ in _collection_[ track by _id_]' but got '"+a.optionsExpression+"'.");var S=(f[1],f[2]),w=o(S),L=s.scope();i.$watch(function(){return w(L)},function(e,t){b=angular.copy(e),i.options=angular.copy(e),r()},!0)}else i.$watch("initialOptions",function(e){b=angular.copy(e),i.options=angular.copy(e),r()});var $=s[0].querySelector(".option");if(!$)throw new Error({name:"modalSelectError:noOptionTemplate",message:'When using modalSelect directive you must include an element with class "option" to provide a template for your select options.',toString:function(){return this.name+" "+this.message}});i.inner=angular.element($).html(),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode.removeChild(this)}),angular.element($).remove(),l.$render=function(){i.ui.value=l.$viewValue};var k=i.getSelectedValue=function(e){if(null===e||void 0===e)return e;if(h){var t=i.optionGetter({option:e});return t}return p?val=e[p]:val=e,val};i.setOption=function(e){var t=l.$viewValue,n=k(e);l.$setViewValue(n),l.$render(),i.onSelect&&i.onSelect({newValue:n,oldValue:t}),i.modal.hide().then(function(){i.showList=!1,i.ui.hasSearch&&m&&(i.ui.searchValue="")})},i.unsetValue=function(){t(function(){l.$setViewValue(""),l.$render(),i.modal.hide(),i.showList=!1,i.onReset&&angular.isFunction(i.onReset)&&i.onReset()})},i.closeModal=function(){i.modal.hide().then(function(){i.showList=!1})},i.compareValues=function(e,t){return angular.equals(e,t)};var y=v?"modal-template-multiple.html":"modal-template.html";i.modal=e.fromTemplate(modalSelectTemplates[y],{scope:i}),i.$on("$destroy",function(){i.modal.remove()}),s.on("click",function(){u?(i.showList=!0,i.modal.show()):i.modal.show().then(function(){i.showList=!0,i.ui.shortList=u})}),i.ui.hasSearch&&(i.$watch("ui.searchValue",function(e){i.options=n("filter")(b,e)}),i.clearSearch=function(){i.ui.searchValue=""}),l.$render()}}}])}();